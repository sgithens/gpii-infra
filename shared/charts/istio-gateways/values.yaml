#
# Gateways Configuration
# By default (if enabled) a pair of Ingress and Egress Gateways will be created for the mesh.
# You can add more gateways in addition to the defaults but make sure those are uniquely named
# and that NodePorts are not conflicting.
# Disable specifc gateway by setting the `enabled` to false.
#
enabled: true

gateways:
  istio-egressgateway:
    enabled: true
    labels:
      app: istio-egressgateway
      istio: egressgateway
    autoscaleEnabled: true
    autoscaleMin: 2
    autoscaleMax: 5
    # specify replicaCount when autoscaleEnabled: false
    # replicaCount: 1
    rollingMaxSurge: 100%
    rollingMaxUnavailable: 25%
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 1024Mi
    cpu:
      targetAverageUtilization: 80
    serviceAnnotations: {}
    podAnnotations: {}
    type: ClusterIP #change to NodePort or LoadBalancer if need be
    ports:
    - port: 80
      name: http2
    - port: 443
      name: https
      # This is the port where sni routing happens
    - port: 15443
      targetPort: 15443
      name: tls
    secretVolumes:
    - name: egressgateway-certs
      secretName: istio-egressgateway-certs
      mountPath: /etc/istio/egressgateway-certs
    - name: egressgateway-ca-certs
      secretName: istio-egressgateway-ca-certs
      mountPath: /etc/istio/egressgateway-ca-certs
    #### Advanced options ########
    env:
      # Set this to "external" if and only if you want the egress gateway to
      # act as a transparent SNI gateway that routes mTLS/TLS traffic to
      # external services defined using service entries, where the service
      # entry has resolution set to DNS, has one or more endpoints with
      # network field set to "external". By default its set to "" so that
      # the egress gateway sees the same set of endpoints as the sidecars
      # preserving backward compatibility
      # ISTIO_META_REQUESTED_NETWORK_VIEW: ""
      # A gateway with this mode ensures that pilot generates an additional
      # set of clusters for internal services but without Istio mTLS, to
      # enable cross cluster routing.
      ISTIO_META_ROUTER_MODE: "sni-dnat"
    nodeSelector: {}
    tolerations: []
    # Specify the pod anti-affinity that allows you to constrain which nodes
    # your pod is eligible to be scheduled based on labels on pods that are
    # already running on the node rather than based on labels on nodes.
    # There are currently two types of anti-affinity:
    #    "requiredDuringSchedulingIgnoredDuringExecution"
    #    "preferredDuringSchedulingIgnoredDuringExecution"
    # which denote "hard" vs. "soft" requirements, you can define your values
    # in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
    # correspondingly.
    # For example:
    # podAntiAffinityLabelSelector:
    # - key: security
    #   operator: In
    #   values: S1,S2
    #   topologyKey: "kubernetes.io/hostname"
    # This pod anti-affinity rule says that the pod requires not to be scheduled
    # onto a node if that node is already running a pod with label having key
    # "security" and value "S1".
    podAntiAffinityLabelSelector: []
    podAntiAffinityTermLabelSelector: []

# Values from Global originally
logging:
  level: default:info

proxy:
  tracer: zipkin
  envoyMetricsService:
    enabled: false
  envoyAccessLogService:
    enabled: false
  clusterDomain: cluster.local

  image: gke.gcr.io/istio/proxyv2:1.1.13-gke.0

tracer:
  zipkin:
    placeholder: placeholder

controlPlaneSecurityEnabled: true

defaultPodDisruptionBudget:
  enabled: true

arch:
  amd64: 2
  s390x: 2
  ppc64le: 2

defaultNodeSelector: {}
